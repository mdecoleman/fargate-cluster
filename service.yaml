AWSTemplateFormatVersion: 2010-09-09
Description: This stack deployes a docker image into a fargate service running in ECS
Parameters:
  ServiceName:
    Description: Name of the service to deploy
    Type: String
  ClusterStackName:
    Description: Stack name of the cluster
    Type: String
  Certificate:
    Type: String
    Description: Service listener Certificate
  HostedZoneName:
    Type: String
    Description: Hosted Zone Name
  FQDN:
    Type: String
    Description: FQDN
  ContainerImage:
    Type: String
    Description: Docker registry image url
  ContainerPort:
    Type: String
    Description: The container port
  ContainerMemory:
    Type: String
    Description: The memory allocation for the container
    Default: 512
  ContainerCpu:
    Type: String
    Description: The cpu allocation for the container
    Default: 256
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${ClusterStackName}-VPC"
      GroupDescription: Access to the load balancer
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
  ElasticLoadBalancerV2:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      IpAddressType: ipv4
      Name: !Ref ServiceName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets: !Split
        - ","
        - { "Fn::ImportValue": !Sub "${ClusterStackName}-PublicSubnets" }
  HttpsListener:
    DependsOn: TargetGroup
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      Certificates:
        - { "CertificateArn": !Ref Certificate }
      LoadBalancerArn: !Ref ElasticLoadBalancerV2
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  TargetGroup:
    DependsOn: ElasticLoadBalancerV2
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref "ServiceName"
      Port: !Ref ContainerPort
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${ClusterStackName}-VPC"
  ApiRecordSet:
    DependsOn: ElasticLoadBalancerV2
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: { "Fn::GetAtt": [ElasticLoadBalancerV2, DNSName] }
        HostedZoneId:
          { "Fn::GetAtt": [ElasticLoadBalancerV2, CanonicalHostedZoneID] }
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref FQDN
      Type: A
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"

                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "ServiceName"
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref ContainerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::ImportValue: !Sub "${ClusterStackName}-LogGroup"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ui
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub "${ClusterStackName}-VPC"
      GroupDescription: Access to the load balancer
      SecurityGroupIngress:
        - FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref SecurityGroup
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref "ServiceName"
      Cluster:
        Fn::ImportValue: !Sub "${ClusterStackName}-Cluster"
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 3
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets: !Split
            - ","
            - Fn::ImportValue: !Sub "${ClusterStackName}-PrivateSubnets"
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref "TargetGroup"
